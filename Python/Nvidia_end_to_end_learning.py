# Network architecture adapts Nvidia's paper "End to End Learning for Self-Driving Cars"
model = Sequential()
    
# Normalization on the fly from comma ai model
model.add(Lambda(lambda x: x/127.5 - 1., input_shape=(66, 200, 3)))
    
#model.add(Convolution2D(3, 1, 1, border_mode='same', name='color_conv'))
model.add(Convolution2D(24, 5, 5, subsample=(2, 2), border_mode="same", init='he_normal'))
model.add(ELU())
model.add(Convolution2D(36, 5, 5, subsample=(2, 2), border_mode="same", init='he_normal'))
model.add(ELU())
model.add(Convolution2D(48, 5, 5, subsample=(2, 2), border_mode="same", init='he_normal')) 
model.add(ELU())
model.add(Convolution2D(64, 3, 3, subsample=(1, 1), border_mode="same", init='he_normal'))
model.add(ELU())
model.add(Convolution2D(64, 3, 3, subsample=(1, 1), border_mode="same", init='he_normal'))
model.add(ELU())                         
model.add(Flatten())
#model.add(Dropout(.2))
model.add(Dense(1164, init='he_normal'))
#model.add(Dropout(.5))
model.add(ELU())
model.add(Dense(100, init='he_normal'))
model.add(ELU())
model.add(Dense(50, init='he_normal'))
model.add(ELU())
model.add(Dense(10, init='he_normal'))
model.add(ELU())
model.add(Dense(1, init='he_normal'))

adam = Adam(lr=1e-4, beta_1=0.9, beta_2=0.999, epsilon=1e-08, decay=0.0)
model.compile(optimizer="adam", loss="mse")